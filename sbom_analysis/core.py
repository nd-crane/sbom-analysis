# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['show_metadata', 'show_entity_types', 'show_top_n_props', 'show_measures']

# %% ../nbs/00_core.ipynb 5
def show_metadata(kg, dataframe=False):
    """
    Return total number of triples, distict entities, and properties to a pandas dataframe.
    
    - `kg`: `KnowledgeGraph()` - Knowledge graph to query from
    - `dataframe` : `bool` - Optionally, return result to dataframe
    """
    
    query = """
    SELECT 
        (COUNT(*) AS ?triples)
        (COUNT(DISTINCT ?entity) AS ?entities)
        (COUNT(DISTINCT ?property) AS ?properties)
    WHERE {
        ?subject ?property ?object .
        BIND(?subject AS ?entity) .
    }
    """

    if dataframe:
        return kg.query_as_df(query)

    for row in kg.query(query):
        print("Total Triples:", row['triples'])
        print("Distinct Entities:", row['entities'])
        print("Distinct Properties:", row['properties'])

# %% ../nbs/00_core.ipynb 8
def show_entity_types(kg, dataframe=False):
    """
    Show counts of entity types
    
    - `kg`: `KnowledgeGraph()` - Knowledge graph to query from
    - `dataframe` : `bool` - Optionally, return result to dataframe
    """
    
    query = """
    SELECT ?type (COUNT(?entity) as ?count)
    WHERE {
        ?entity a ?type .
    }
    GROUP BY ?type
    ORDER BY DESC(?count)
    """
    
    if dataframe:
        return kg.query_as_df(query)

    result = kg.query(query)
    for row in result:
        print(row["type"], ":", row["count"])


# %% ../nbs/00_core.ipynb 10
def show_top_n_props(kg, n, dataframe=False):
    """
    Display the top N properties from a knowledge graph
    
    - `kg`: `KnowledgeGraph()` - Knowledge graph to query from
    - `n`: `int` - Top n results to display
    - `dataframe` : `bool` - Optionally, return result to dataframe
    """
    
    query = """
    SELECT ?property (COUNT(?property) as ?count)
    WHERE {
        ?s ?property ?o .
    }
    GROUP BY ?property
    ORDER BY DESC(?count)
    LIMIT %d
    """ % n
    
    if dataframe:
        return kg.query_as_df(query)

    result = kg.query(query)
    for row in result:
        print(row["property"], ":", row["count"])

# %% ../nbs/00_core.ipynb 12
import kglab
def show_measures(kg:kglab.KnowledgeGraph()): #Knowledge graph to query from
    """
    Display number of nodes and edges for knowledge graph
    """
    measure = kglab.Measure()
    measure.measure_graph(kg)

    print("edges", measure.get_edge_count())
    print("nodes", measure.get_node_count())

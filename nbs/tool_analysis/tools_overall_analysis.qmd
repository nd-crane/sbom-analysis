---
title: "Tools overall analysis"
format: 
  html:
    toc: true
    code-fold: true
jupyter: python3    
execute:
  echo: false
  output: asis
---


## List of SBOM generation tools

::: {.border}
- [Syft](#syft)
- [Tern](#tern)
- [Fossa](#fossa)
- [Trivy](#trivy)
- [Bom](#bom)
- [Microsoft SBOM Ttool](#microsoft-sbom-tool)
- [Sbom4python](#sbom4python)
- [gh-sbom](#gh-sbom)
- [CycloneDX Generator](#cdxgen)

- [ScanCode toolkit](#scancode-toolkit)
- [Cosign](#cosign)
- [Augur](#augur)
- [SPDX SBOM Generator](#spdx-sbom-generator)
- [OSS Review Toolkit](#oss-review-toolkit)
- [SwiftBOM](#swiftbom)
:::

| 
|   Some of the features we used to analyze the SBOM generation tools were based on the framework for Evaluating SBOM Tools in [fossa](https://fossa.com/blog/framework-evaluating-sbom-tools/), such as:
|   
|   1. What standards it supports (SPDX, Cyclone DX)
|   2. Compliance with the Cyber Security Executive Order
|   3. Data Field Coverage
|   4. Automation Support
|   5. Programming Language Support
|   6. Dependency Recognition Depth
|
| We classified the tools following the [SBOM Tool Classification Taxonomy](https://www.ntia.gov/files/ntia/publications/ntia_sbom_tooling_taxonomy-2021mar30.pdf) document by the NTIA SBOM Formats & Tooling Working Group.


```{python}
import json
from nbdev import qmd
from IPython.core.display import HTML

def im(fn, width, **kw): return qmd.img(f"../figs/logos/{fn}", width=f"{width}%", **kw)

def read_data(fname):
    with open(fname, 'r') as myfile:
        data=myfile.read()
    return json.loads(data)

data = read_data('tools.json')
file_description = data["creation_info"]["description"]
tools = data["tools"]
tool_names = [ tool['gen_tool_name'] for tool  in tools]

for tool in tools:

    # tool name
    print(qmd.div(f"## {tool['gen_tool_pname']}", style={"color": "#003366"}))

    # table header
    print(qmd.tbl_row(["Feature", "Description"]))
    print(qmd.tbl_sep([1,1]))     
    #print(qmd.tbl_row(["**Tool Name**", tool['gen_tool_name']]))
    
    # rows
    # tool general info
    if 'logo' in tool.keys():
        print(qmd.tbl_row(["**Logo**", im(tool['logo'], 10)]))

    print(qmd.tbl_row(["**Version**", tool['gen_tool_version']]))
    print(qmd.tbl_row(["**License**", tool['license']]))
    print(qmd.tbl_row(["**Language**", tool['language']]))

    # classification 
    classifications = ""
    for classification in tool['classification']:
        classifications += classification + ", "
    print(qmd.tbl_row(["**Classification**", classifications[0:-2]]))
    
    # functionality
    print(qmd.tbl_row(["**Functionality**", tool['functionality']]))

    # locations
    urls = ""
    for url in tool['locations']:
        urls += f"""[{url}]({url}), """
    print(qmd.tbl_row(["**Locations**", urls[:-2]]))

    # Fossa Framework
    print(qmd.tbl_row(["**Automation support**", tool['automation_support']]))
    print(qmd.tbl_row(["**Data Fields**", tool['data_fields']]))
    print(qmd.tbl_row(["**Package Depth**", tool['package_depth']]))
    print(qmd.tbl_row(["**Relationships**", tool['relationships']]))
  
    # specifications 
    specs_md = ""
    for spec in tool['support_specs']:
        file_formats = str(spec['file_formats']).replace("'", "")
        spec_version = str(spec['spec_version']).replace("'", "")
        specs_md += f"""**{spec['spec_name']}**<br>Versions: `{spec_version[1:-1]}`<br>Formats: `{file_formats[1:-1]}`<br>"""
    print(qmd.tbl_row(["**Support Specifications**", specs_md[:-4]]))
    
    # functions
    if 'functions' in tool.keys():
        functions = ""
        for f in tool['functions']:
            functions += f"""`{f}`<br>"""
        print(qmd.tbl_row(["**Functions**",functions[:-4] ]))

    # howtouse
    howtouse_md = ""
    for howtouse in tool['How to use']:
        howtouse_md += f"{howtouse['source']}:"
        if 'cmd' in howtouse.keys():
            howtouse_md += f"""<br>`$ {howtouse['cmd']}`<br>"""
        if 'comment' in howtouse.keys():
            howtouse_md += f"""<br>{howtouse['comment']}<br>"""               

        #howtouse_md += f"""{howtouse['source']}:<br>`$ {howtouse['cmd']}`<br>"""        
    print(qmd.tbl_row([f"**How to use**", howtouse_md[:-4]]))

  
    # installation
    installation_md = ""
    uri = tool['installation']['instructions']
    installation_md += f"""Instructions: [{uri}]({uri})<br>"""
    installation_md += f"""It requires sudo: {tool['installation']['requires_sudo']}<br>"""
    installation_md += f"""It was installed: {tool['installation']['was_installed']}<br>"""
    if 'comments' in tool['installation'].keys():
        testing_md += f"""Comments: {tool['installation']['comments']}<br>"""
    print(qmd.tbl_row(["**Installation**", installation_md]))

    # testing    
    testing_md = f"""It was tested: {tool['testing']['was_tested']}<br>"""
    if 'comments' in tool['testing'].keys():
        testing_md += f"""Comments: {tool['testing']['comments']}"""
    print(qmd.tbl_row(["**Testing**", testing_md]))

```
